name: Merge to Main

on:
  push:
    branches:
      - main

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.set-release-version.outputs.version }}
    permissions:
      contents: write # To push commits and tags, and create releases
      packages: write # To push Docker images to GHCR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # We need to fetch all history and tags for versioning
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Set release version
        id: set-release-version
        run: |
          mvn versions:set -DremoveSnapshot -DprocessAllModules=true -DgenerateBackupPoms=false
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Commit release version
        run: |
          git add .
          git commit -m "ci: Release version ${RELEASE_VERSION}"

      - name: Create Git tag
        run: |
          git tag -a "v${RELEASE_VERSION}" -m "Release version ${RELEASE_VERSION}"

      - name: Build project
        run: mvn clean verify

      - name: Extract coverage and update README badges
        run: |
          # Debug: List files to see what was generated
          echo "Checking for JaCoCo reports..."
          find target -name "index.html" -path "*/jacoco*" || true
          
          # Extract coverage from JaCoCo aggregate report
          COVERAGE_FILE="target/site/jacoco-aggregate/index.html"
          
          if [ -f "$COVERAGE_FILE" ]; then
            echo "Found coverage report at: $COVERAGE_FILE"
            # Try multiple patterns to extract coverage
            COVERAGE=$(grep -oP 'Total[^%]+\K\d+(?=%)' "$COVERAGE_FILE" | head -1 || true)
            
            if [ -z "$COVERAGE" ]; then
              # Try alternative pattern
              COVERAGE=$(grep -oP '<tfoot>.*?(\d+)%' "$COVERAGE_FILE" | grep -oP '\d+' | tail -1 || true)
            fi
            
            echo "Extracted coverage: $COVERAGE"
            
            if [ -z "$COVERAGE" ]; then
              COVERAGE="N/A"
              COVERAGE_COLOR="lightgrey"
            elif [ "$COVERAGE" -ge 80 ]; then
              COVERAGE_COLOR="brightgreen"
            elif [ "$COVERAGE" -ge 60 ]; then
              COVERAGE_COLOR="yellow"
            elif [ "$COVERAGE" -ge 40 ]; then
              COVERAGE_COLOR="orange"
            else
              COVERAGE_COLOR="red"
            fi
          else
            echo "Coverage report not found at: $COVERAGE_FILE"
            echo "Directory contents:"
            ls -la target/site/ || echo "target/site/ does not exist"
            COVERAGE="N/A"
            COVERAGE_COLOR="lightgrey"
          fi
          
          echo "Setting coverage badge to: ${COVERAGE}% with color ${COVERAGE_COLOR}"
          
          # Update version badge
          sed -i "s/version-[0-9.]*-blue/version-${RELEASE_VERSION}-blue/" README.md
          
          # Update coverage badge - use | as delimiter to avoid issues with %
          sed -i "s|coverage-[^)]*|coverage-${COVERAGE}%25-${COVERAGE_COLOR}|" README.md
          
          # Commit badge updates
          git add README.md
          git commit --amend --no-edit

      - name: Create release notes
        run: |
          echo "Release ${RELEASE_VERSION}" > release-notes.md
          echo "" >> release-notes.md
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD >> release-notes.md

      - name: Collect release artifacts
        run: |
          # Extract module names from parent pom.xml
          MODULES=$(mvn help:evaluate -Dexpression=project.modules -q -DforceStdout | grep -oP '(?<=<string>)[^<]+' || true)
          
          # Build artifact paths for all modules
          ARTIFACTS=""
          for module in $MODULES; do
            if [ -d "$module/target" ]; then
              # Add all JARs from each module's target directory
              ARTIFACTS="${ARTIFACTS} ${module}/target/*.jar"
            fi
          done
          
          echo "RELEASE_ARTIFACTS=${ARTIFACTS}" >> $GITHUB_ENV
          echo "Artifacts to release: ${ARTIFACTS}"

      - name: Set next development version
        run: |
          mvn versions:set -DnextSnapshot=true -DprocessAllModules=true -DgenerateBackupPoms=false
          NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

      - name: Commit next development version
        run: |
          git add .
          git commit -m "ci: Prepare for next development iteration (${NEXT_VERSION})"

      - name: Push changes and tags
        run: |
          git push
          git push --tags

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${RELEASE_VERSION}" \
            --title "Release ${RELEASE_VERSION}" \
            --notes-file release-notes.md \
            $RELEASE_ARTIFACTS

  build-release-docker-images:
    needs: version-and-release
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/docker-build.yml
    with:
      push-to-registry: true
      image-tag: latest
      checkout-ref: v${{ needs.version-and-release.outputs.release-version }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
