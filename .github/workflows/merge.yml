name: Merge to Main

on:
  push:
    branches:
      - main

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To push commits and tags, and create releases
      packages: write # To push Docker images to GHCR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # We need to fetch all history and tags for versioning
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Build and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Set version to release version (remove -SNAPSHOT)
          mvn versions:set -DremoveSnapshot -DprocessAllModules=true
          RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

          # Commit the release version
          git add .
          git commit -m "ci: Release version ${RELEASE_VERSION}"

          # Build the project
          mvn clean install

          # Create release notes
          echo "Release ${RELEASE_VERSION}" > release-notes.md
          echo "" >> release-notes.md
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD >> release-notes.md

          # Create GitHub Release and upload artifacts
          gh release create "v${RELEASE_VERSION}" \
            --title "Release ${RELEASE_VERSION}" \
            --notes-file release-notes.md \
            commons/target/*.jar \
            tracker-command/target/*.jar \
            tracker-query/target/*.jar

          # Set version to next development version
          mvn versions:set -DnextSnapshot=true -DprocessAllModules=true
          NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV

          # Commit the next development version
          git add .
          git commit -m "ci: Prepare for next development iteration (${NEXT_VERSION})"

          # Push commits and tags
          git push
          git push --tags

  build-release-docker-images:
    needs: version-and-release
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/docker-build.yml
    with:
      push-to-registry: true
      image-tag: latest
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}
